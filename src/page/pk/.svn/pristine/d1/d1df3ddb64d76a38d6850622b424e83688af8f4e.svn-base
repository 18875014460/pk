<template>
	<div :class="{'sy-pk-optimeize_absolute': !isfullscreen,'sy-pk-optimeize_fixed': isfullscreen}">
		<div class="sy-pk-optimeize_head">
			<el-button>撤销</el-button> 
			<el-button>恢复</el-button>
			<el-button @click="handleSavePK">保存</el-button>
		</div>
		<div class="sy-pk-step-optimeize_absolute sy-theme-tableBorder" v-loading="pageLoading"
    		element-loading-text="拼命加载中...">
			<el-row class="sy-pk-optimeize_body">
				<el-col class="sy-pk-optimeize-col" :span="3">
					<h3>待处理作务<span style="color: #FF4949"> ( {{dataNumber.length}} ) </span></h3>
					<el-select v-model="optimizeTypoeId" style="width: 100%;" placeholder="班级" @change="handleChangeOptimizeTypoe">
						<el-option v-for="item in optimizeTypoeOptions" :key="item.value" :label="item.label" :value="item.value"></el-option>
					</el-select>
					<div class="sy-pk-optimeize-tree-box sy-pk_bg_fff" v-if="optimizeTypoeId == '1' || optimizeTypoeId == '2' || optimizeTypoeId == '3'">
						<div class="sy-pk-optimeize-tree_head">
							<el-input placeholder="关键字" icon="search" v-model="keyWords" :on-icon-click="handleIconClick"></el-input>
						</div>
						<div class="sy-pk-optimeize-tree_body">
							<el-tree :data="classTreeData" style="border:0;" 
								:render-content="renderContent" 
								:default-expanded-keys="[1]" 
								node-key="id" 
								ref="tree"
								highlight-current
								:props="defaultProps" 
								@node-click="handleNodeClick"
								accordion>
							</el-tree>
						</div>
					</div>
				</el-col>
				<!-- 班级  教师  场地  -->
				<el-col :span="21" v-if="optimizeTypoeId == '1' || optimizeTypoeId == '2' || optimizeTypoeId == '3'">
					<el-row>
						<el-col class="sy-pk-optimeize-col" :span="14">
							<div>
								<el-row>
									<el-col :span="4">
										<h3><el-tag type="success">{{currentMsg.name}}课表</el-tag></h3>
									</el-col>
									<el-col :span="20" class="right" style="line-height: 40px;padding-right: 10px;">
										<el-checkbox v-model="checkList.class.teacher">教师</el-checkbox>
										<el-checkbox v-model="checkList.class.address">场地</el-checkbox>
										<el-radio v-model="checkList.class.radio" label="all" style="margin-left: 10px;">课程全称</el-radio>
										<el-radio v-model="checkList.class.radio" label="short">课程简称</el-radio>
										<!-- <el-button style="margin-left: 10px;" type="text" @click="handleFullScren">
											<i v-show="!isfullscreen" title="全屏" class="fa fa-arrows-alt"></i>
											<i v-show="isfullscreen" title="取消全屏" class="fa fa-minus-square-o" aria-hidden="true"></i>
										</el-button> -->
									</el-col>
								</el-row>
								<table class="sy-base-table-border">
									<thead>
										<tr>
											<th :title="currentMsg.name" style="width: 35px;"></th>
											<th v-for="item in columesList" :key="item.id">{{item.name}}</th>
										</tr>
									</thead>
									<tbody>
										<tr class="clazz_row" v-for="(item,index) in tableData" :key="index">
											<td style="line-height: 16px;background-color: #fff">{{item.number}}</td>
											<td v-for="key in columesList" :key="key.id" style="line-height: 16px;"
												:style="{
													'background': item[key.id + '_' + item.id + '_status'] == 2 ? '#13CE66' : item[key.id + '_' + item.id + '_status'] == 3 ? '#F7BA2A' : item[key.id + '_' + item.id + '_status'] == 1 ? '#FFF773' : item[key.id + '_' + item.id + '_status'] == 4 ? '#FF4949' :'transparent',
													'color': item[key.id + '_' + item.id + '_status'] == 0 ? '#333' : '#333'
												}"
											>
												<el-tooltip placement="top" effect="light" v-if="isSHOWtITLEinfo && !item[key.id+'_'+item.id+'_info']">
													<div slot="content">
														<el-tag type="success" v-if="item[key.id + '_' + item.id + '_status'] == 2">调整后会减少冲突数量！</el-tag>
														<el-tag type="danger" v-else>调整后会增加冲突数量！</el-tag>
													</div>
													<div v-for="week in item[key.id]" :key="week.id" @click="handleClick(item, key, week)"
														:class="{'pk-selected': week.hover}"
														v-on:mouseenter="mounseOver(item, key, week, 'in')" v-on:mouseleave="mounseLeave(item, key, week, 'out')"
														:style="{
															'background': week.status == 2 ? '#13CE66' : week.status == 3 ? '#F7BA2A' : week.status == 1 ? '#FFF773' : 'transparent',
															'color': week.status == 0 ? '#333' : '#333'
														}"
													>
														<div class="sy-pk-o">
															<span v-if="checkList.class.radio == 'all'">{{week.name}}</span>
															<span v-if="checkList.class.radio == 'short'">{{week.courseShortName}}</span>
															<span v-if="week.singleDoubleType != 0">《{{week.singleDoubleType==1? '单周':'双周'}}》</span><br>
														</div>
														<div class="sy-pk-o" v-if="week.teachers.length != 0 && checkList.class.teacher" :title="$_.map(week.teachers, 'teacherName').join('、')">({{$_.map(week.teachers, 'teacherName').join('、')}})</div>
														<div v-if="checkList.class.address">{{week.roomAddr}}</div>
													</div>
												</el-tooltip>
												<div v-else v-for="week in item[key.id]" :key="week.id" @click="handleClick(item, key, week)"
													:class="{'pk-selected': week.hover}"
													v-on:mouseenter="mounseOver(item, key, week, 'in')" v-on:mouseleave="mounseLeave(item, key, week, 'out')"
													:style="{
														'background': week.status == 2 ? '#13CE66' : week.status == 3 ? '#F7BA2A' : week.status == 1 ? '#FFF773' : 'transparent',
														'color': week.status == 0 ? '#333' : '#333'
													}"
												>
													<div class="sy-pk-o">
														<span v-if="checkList.class.radio == 'all'">{{week.name}}</span>
														<span v-if="checkList.class.radio == 'short'">{{week.courseShortName}}</span>
														<span v-if="week.singleDoubleType != 0">《{{week.singleDoubleType==1? '单周':'双周'}}》</span><br>
													</div>
													<div class="sy-pk-o" v-if="week.teachers.length != 0 && checkList.class.teacher" :title="$_.map(week.teachers, 'teacherName').join('、')">({{$_.map(week.teachers, 'teacherName').join('、')}})</div>
													<div v-if="checkList.class.address">{{week.roomAddr}}</div>
												</div>
											</td>
										</tr>
									</tbody>
								</table>
							</div>
							<div>
								<el-row style="padding-top: 10px;" :gutter="10">
									<el-col :span="12">
										<div>
											<div style="background: #FE9AFD;color: #fff;line-height: 37px;text-align:center;">待排</div>
											<ul class="no_teacher_ul sy-theme-tableBorder">
												<li class="sy-theme-tableBorder" v-for="(c,i) in noTeacherList" :key="i">{{c.name}}</li>
											</ul>
										</div>
									</el-col>
									<el-col :span="12">
										<table class="sy-base-table-border">
											<thead>
												<tr>
													<th :colspan="3" style="background: #FF4949;color: #fff;">冲突详情</th>
												</tr>
												<tr>
													<th>来源</th>
													<th>值</th>
													<th>名称</th>
												</tr>
											</thead>
											<tbody>
												<tr class="clazz_row" v-for="(item,index) in ignoreList" :key="index">
													<td>{{item.res}}</td>
													<td :style="{'background': statusColor[item.value].color}">{{statusColor[item.value].text}}</td>
													<td>{{item.name}}</td>
												</tr>
												<tr v-if="ignoreList.length == 0">
													<td :colspan="3">暂无数据</td>
												</tr>
											</tbody>
										</table>
									</el-col>
								</el-row>
							</div>
						</el-col>
						<el-col class="sy-pk-optimeize-col" :span="10">
							<div>
								<h3>{{teacherName1}}老师课表<span style="color: #FF4949"> ( 调课老师课表 ) </span></h3>
								<table class="sy-base-table-border">
									<thead>
										<tr>
											<th style="width: 35px;"></th>
											<th v-for="item in columesList" :key="item.id" :title="item.name">{{item.name}}</th>
										</tr>
									</thead>
									<tbody>
										<tr class="clazz_row" v-for="(item,index) in moveTeacherList" :key="index">
											<td style="line-height: 16px;background-color: #fff">{{item.number}}</td>
											<td v-for="key in columesList" :key="key.id" 
												:style="{'line-height': '16px'}"
												class="sy-pk-o"
											>
												<div v-for="week in item[key.id]" :key="week.id">
													<div class="sy-pk-o" style="text-align: left;">
														<span>{{week.name}}</span>
														<span v-if="week.singleDoubleType != 0">《{{week.singleDoubleType==1? '单周':'双周'}}》</span><br>
													</div>
													<div class="sy-pk-o" style="text-align: left;" :title="week.gradeName+week.className">{{week.gradeName+week.className}}</div>
												</div>
											</td>
										</tr>
									</tbody>
								</table>
							</div>
							<div>
								<h3>{{teacherName2}}老师课表<span style="color: #FF4949"> ( 被调课老师课表 ) </span></h3>
								<table class="sy-base-table-border">
									<thead>
										<tr>
											<th style="width: 35px;"></th>
											<th v-for="item in columesList" :key="item.id" :title="item.name">{{item.name}}</th>
										</tr>
									</thead>
									<tbody>
										<tr class="clazz_row" v-for="(item,index) in dragTeacherList" :key="index">
											<td style="line-height: 16px;background-color: #fff">{{item.number}}</td>
											<td v-for="key in columesList" :key="key.id" 
												:style="{'line-height': '16px'}"
											>
												<div v-for="week in item[key.id]" :key="week.id">
													<div class="sy-pk-o" style="text-align: left;">
														<span>{{week.name}}</span>
														<span v-if="week.singleDoubleType != 0">《{{week.singleDoubleType==1? '单周':'双周'}}》</span><br>
													</div>
													<div class="sy-pk-o" style="text-align: left;" :title="week.gradeName+week.className">{{week.gradeName+week.className}}</div>
												</div>
											</td>
										</tr>
									</tbody>
								</table>
							</div>
						</el-col>
					</el-row>
				</el-col>
				<!-- 教师总课表 -->
				<el-col :span="20" style="padding: 40px 10px 0px;" v-if="optimizeTypoeId == '4' || optimizeTypoeId == '4'">
					<el-row>
						<el-col :span="16">
							<el-select v-model="gradeId" style="width: 130px;" placeholder="班级" >
								<el-option v-for="item in optimizeTypoeOptions" :key="item.value" :label="item.label" :value="item.value"></el-option>
							</el-select>
						</el-col>
						<el-col :span="8" class="right">
							<el-checkbox-group v-model="checkList.teacher.checked" style="display:inline-block;">
								<el-checkbox label="1">课程简称</el-checkbox>
								<el-checkbox label="2">班级</el-checkbox>
							</el-checkbox-group>
							<el-button style="margin-left: 20px;" type="text" @click="handleFullScren">
								<i v-show="!isfullscreen" title="全屏" class="fa fa-arrows-alt"></i>
								<i v-show="isfullscreen" title="取消全屏" class="fa fa-minus-square-o" aria-hidden="true"></i>
							</el-button>
						</el-col>
					</el-row>

				</el-col>
				<el-col :span="24" style="padding: 10px;" v-if="optimizeTypoeId == '4'">
					<table class="sy-base-table-border hover">
						<thead>
							<tr>
								<th>时间</th>
								<th>课节</th>
								<th v-for="(item, index) in teacherList" :key="'t_'+index">{{item.name}}</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td></td>
							</tr>
						</tbody>
					</table>
				</el-col>
			</el-row>
		</div>
		<div class="center" style="padding: 10px;">
			<el-button type="primary" @click="prev">上一步</el-button>
			<el-button type="primary" @click="next">下一步</el-button>
		</div>
	</div>
	
</template>
<script type="text/javascript">
// 0 -- 无白色  1 -- 选中黄色 2 -- 可调绿色 3 -- 冲突深黄色 4 -- 不可调红色
import screenfull from 'screenfull';
import {getPkWaitHandle,getPkGradeList,getClazzListByGradeId,
	selectConflictById,
	selectAdjustVeryNiceIndex,
	changePKweek,
	sheckedPKweek,
	selectAllRule,
	saveCoursesheetvm,
	getSelectGradeCourseTeacher,getPlaceTypes,getPlaceByTypeId,getBb,getFestival,selectCoursesheetvm} from '../request.js';
export default {
	data() {
		return {
			pageLoading: false, // ...
			id: this.$route.query.id, // 方案id
			teacherList: [
				{id: '1',name: '张三'},{id: '1',name: '李四'},{id: '1',name: '小三'},{id: '1',name: '张三'},{id: '1',name: '张三'},{id: '1',name: '张三'},{id: '1',name: '张三'},
				{id: '1',name: '张三'},{id: '1',name: '张三'},{id: '1',name: '张三'},{id: '1',name: '张三'},{id: '1',name: '张三'},{id: '1',name: '张三'},{id: '1',name: '张三'}
			],
			gradeId: "", // 教师总课表 年级下拉
			optimizeTypoeId: "1",
			optimizeTypoeOptions: [
				// 调课类型
				{ label: "按班级调课", value: "1" },
				{ label: "按教师调课", value: "2" },
				{ label: "按场地调课", value: "3" },
				{ label: "按教师总课表调课", value: "4" },
				{ label: "按班级总课表调课", value: "5" }
			],
			currentMsg: {
				id: '',
				name: ''
			},
			teacherName1: '', // ( 调课老师课表 )
			teacherName2: '', // ( 被调课老师课表 )
			classOptions: [
				{ value: "1", label: "1班" },
				{ value: "2", label: "2班" },
				{ value: "3", label: "3班" },
				{ value: "4", label: "4班" }
			],
			defaultProps: {
				children: "children",
				label: "label"
			},
			classId: "",
			keyWords: "",
			dataNumber: [],// 待处理作务
			classTreeData: [], // 树
			checkList: {
				// 复选组
				class: {
					address: false,
					teacher: true,
					radio: "short"
				},
				teacher: {
					checked: ['1','2']
				}
			},
			columesList: [],
			tableData: [],
			// 调课老师课表
			moveTeacherList: [],
			// 被调课老师课表
			dragTeacherList: [],
			showDargTeacherList: false, // 是否显示 被调课老师课表
			noTeacherList: [
				// 待排老师列表
				{ id: "1", name: "教师1" },
				{ id: "1", name: "教师2" },
				{ id: "1", name: "教师3" },
				{ id: "1", name: "教师4" },
				{ id: "1", name: "教师5" },
				{ id: "1", name: "教师6" }
			],
			showNoTeacherList: false, // 是否显示 待排老师列表
			// 1 独占元素冲突 2 不排 3 较好
			statusColor: {
				"0": { text: "独占元素冲突", color: "#FDC101" },
				"1": { text: "不排", color: "#FF4949" },
				"2": { text: "较差", color: "#F7BA2A" },
				"3": { text: "一般", color: "#73ccff" },
				"4": { text: "较好", color: "#13CE66" },
			},
			ignoreList: [],
			oldignoreList: [],
			isfullscreen: false, // 是否全屏
			step: '0',
			stepData: {}, // 数据
			oldSatates: [], // 冲突数据
			isSHOWtITLEinfo: false,
			oldPKcORSERiDS: '',
		};
	},
	created(){
		this.init();
	},
  	methods: {
		init(){
			this.getNumbers();// 查询为安排作务
			// 初始化为年级班级树
			this.loadTree('1');
			this.getBbList(); // 查询星期
			this.getPkList(); // 查询总课表
			this.getRuleList().then(res=>{}) // 查询规则
		},
		// 查询为安排作务
		getNumbers(){
			getPkWaitHandle(this.id).then(res=>{
				this.dataNumber = res || [];
			}).catch(err=>{
				this.dataNumber = [];
			})
		},
		// 方案类型改变
		handleChangeOptimizeTypoe(val){
			this.classTreeData = [];
			this.loadTree(val);
		},
		// 加载树
		loadTree(t){
			if(t == '1'){ // 年级班级树
				this.getGradeList().then(res=>{
					this.classTreeData = res;
				});
			}else if(t == '2'){ // 教师
				this.getGradeList().then(res=>{
					this.classTreeData = res;
				});
			}else if(t == '3'){ // 场地
				this.getPlaceTypesList().then(res=>{
					this.classTreeData = res;
				});
			}
		},
		// 加载子树
		handleNodeClick(data,node,vame){
			this.columesList.forEach((_s,s)=>{
				this.dragTeacherList.forEach((_d,d)=>{
					_d[_s.id] = [];
				})
				this.moveTeacherList.forEach((_f,f)=>{
					_f[_s.id] = [];
				})
			})
			if(this.optimizeTypoeId == '1'){ // 班级
				if(data.type == 'grade'){
					this.getClazzList(data.id).then(res=>{
						data.children = res || [];
					}).catch(err=>{
						data.children = [];
					})
				}else{
					this.pageLoading = true;
					this.getCTList().then(res=>{
						this.oldSatates = this.$_.cloneDeep(res);
						this.pageLoading = false;
						this.currentMsg.id = data.id;
						this.currentMsg.name = data.gradeName + data.label;
						this.columesList.forEach((_s,s)=>{
							this.tableData.forEach((_d,d)=>{
								let arr = this.$_.filter(this.stepData[this.step], o=>{
									return o.classId == data.id && o.weekId == _s.id && o.festivalId == _d.id
								})
								let conflictData = this.$_.filter(res, o=>{
									return o.classId == data.id && o.weekId == _s.id && o.festivalId == _d.id
								})
								let rules = this.$_.find(this.oldignoreList, o=>{return o.weekId == _s.id && o.festivalId == _d.id });
								let uniqCourse = this.$_.uniqBy(arr, 'courseId');
								let _course = [];
								uniqCourse.forEach((_f,d)=>{
									_course.push({
										courseSheetId: _f.id,
										id: _f.courseId,
										name: _f.courseName, // 简称
										courseShortName: _f.courseShortName, // 全称
										roomAddr: _f.roomAddr, // 场地
										status: 0,
										hover: false,
										data: arr,
										singleDoubleType: _f.singleDoubleType,
										teachers: this.$_.filter(arr, o=>{return o.courseId == _f.courseId  && o.teacherId})
									})
								})
								_d[`${_s.id}_${_d.id}_status`] = rules ? '4' : (conflictData.length>0 ? 3 : 0);
								_d[`${_s.id}_${_d.id}_conflictData`] = conflictData;
								_d[_s.id] = _course;
								
							})
						})
						console.log(this.tableData);
					}).catch(err=>{
						this.pageLoading = false;
					})
					
				}
			}
			if(this.optimizeTypoeId == '2'){ // 教师
				if(data.type == 'grade'){
					this.getSelectGradeCourseTeacherList(this.id, data.id).then(res=>{
						data.children = res || [];
					}).catch(err=>{
						data.children = [];
					})
				}else if(data.type == 'teacher'){
					console.log(data);
				}else{

				}
			}
			if(this.optimizeTypoeId == '3'){ // 场地
				if(data.type == 'placeType'){
					this.getPlaceByTypeId(data.id).then(res=>{
						data.children = res || [];
					}).catch(err=>{
						data.children = [];
					})
				}else{
					console.log(data);
				}
			}
		},
		// 年级班级树
		getGradeList(){
			return new Promise((resolve, reject) => {
				getPkGradeList(this.id).then(res=>{
					let arr = [];
					res.forEach((_a,a)=>{
						arr.push({
							id: _a.gradeId,
							label: _a.gradeName,
							type: 'grade',
							children: [{}]
						})
					})
					resolve(arr);
				}).catch(err=>{
					reject([])
				})
			})
		},
		// 根据年级id查询班级列表
		getClazzList(id){
			return new Promise((resolve, reject) => {
				getClazzListByGradeId(id).then(res=>{
					let arr = [];
					res.forEach((_a,a)=>{
						arr.push({
							id: _a.id,
							gradeName: _a.gradeName,
							shortName: _a.shortName,
							label: _a.name,
							type: 'clazz',
							children: []
						})
					})
					resolve(arr)
				}).catch(err=>{
					reject([])
				})
			})
		},
		// 根据方案id和年级id查询课程教师集合
		getSelectGradeCourseTeacherList(solutionId,gradeId){
			return new Promise((resolve, reject) => {
				getSelectGradeCourseTeacher(solutionId,gradeId).then(res=>{
					let arr = [];
					res.forEach((_a,a)=>{
						let obj = {
							id: _a.id,
							label: _a.courseName,
							type: 'course',
							children: []
						}
						_a.teacherVMS.forEach((_d,d)=>{
							obj.children.push({
								id: _d.teacherId,
								label: _d.teacherName,
								type: 'teacher',
								children: []
							})
						})
						arr.push(obj)
					})
					resolve(arr)
				}).catch(err=>{
					reject([])
				})
			})
		},
		// 查询场地类型
		getPlaceTypesList(){
			return new Promise((resolve, reject) => {
				getPlaceTypes(this.$store.state.unitId).then(res=>{
					let arr = [];
					res.forEach((_a,a)=>{
						arr.push({
							id: _a.id,
							label: _a.name,
							type: 'placeType',
							children: [{}]
						})
					})
					resolve(arr)
				}).catch(err=>{
					reject([])
				})
			})
		},
		// 根据类型查询场地
		getPlaceByTypeId(id){
			return new Promise((resolve, reject) => {
				getPlaceByTypeId(id).then(res=>{
					let arr = [];
					res.forEach((_a,a)=>{
						arr.push({
							id: _a.id,
							label: _a.address,
							capacity: _a.capacity,
							type: 'place',
							children: []
						})
					})
					resolve(arr)
				}).catch(err=>{
					reject([])
				})
			})
		},
		// 查询星期
		getBbList(){
			this.tableData = [];
			getBb('XQ').then(res=>{
				let arr = [];
				res.data.forEach((_d,d)=>{
					if(_d.value != '6' && _d.value != '7'){
						arr.push({
							id: _d.id,
							name: _d.name
						})
					}
				})
				this.columesList = arr;
				getFestival({unitId:this.$store.state.unitId}).then(data=>{
					let _arr = [];
					data.data.forEach((_d,d)=>{
						let obj = {
							id: _d.id,
							begin: _d.begin,
							end: _d.end,
							number: _d.name,
							sort: _d.sort
						};
						this.columesList.forEach((_s,s)=>{
							obj[_s.id] = [];
							obj[_s.id+'_selected'] = false;// 单击选中
							obj[_s.id+'_'+_d.id+'_info'] = false;
						})
						_arr.push(obj)
					})
					this.tableData = _arr;
					// 调课老师课表
					this.moveTeacherList =  this.$_.cloneDeep(_arr);
					// 被调课老师课表
					this.dragTeacherList = this.$_.cloneDeep(_arr);
				})
			}).catch(err=>{
				
			})
		},
		// 查询课表
		getPkList(){
			return new Promise((resolve, reject) => {
				selectCoursesheetvm(this.id).then(res=>{
					this.stepData[this.step] = this.$_.cloneDeep(res);
					resolve(res);
				}).catch(err=>{
					reject([])
				})
			})
		},
		// 查询冲突
		getCTList(){
			return new Promise((resolve, reject) => {
				selectConflictById(this.id).then(res=>{
					resolve(res);
				}).catch(err=>{
					reject([])
				})
			})
		},
		// 检测冲突
		checkeCTList(obj){
			return new Promise((resolve, reject) => {
				sheckedPKweek(obj).then(res=>{
					resolve(res);
				}).catch(err=>{
					reject([])
				})
			})
		},
		// 查询可调课位
		getCanTKW(arr){
			return new Promise((resolve, reject) => {
				selectAdjustVeryNiceIndex(arr).then(res=>{
					resolve(res);
				}).catch(err=>{
					reject([])
				})
			})
		},		
		// 查询规则
		getRuleList(){
			return new Promise((resolve, reject) => {
				selectAllRule(this.id).then(res=>{
					let ignoreList = [];
					res.forEach((_b,b)=>{
						console.log(_b);
						ignoreList.push({
							res: _b.timesSelType == 'clazz' ? '班级' : _b.timesSelType == 'teacher' ? '教师' : _b.timesSelType == 'course' ? '科目' : _b.timesSelType == 'place' ? '场地' : '',
							type: 'rule',
							value: _b.type+'',
							name: _b.placeName || _b.teacherName || _b.className || _b.courseName,
							weekId: _b.weekId,
							festivalId: _b.festivalId
						})
					})
					console.log(ignoreList);
					this.ignoreList = ignoreList;
					this.oldignoreList = this.$_.cloneDeep(ignoreList);
					resolve(res);
				}).catch(err=>{
					reject([])
				})
			})	
		},			
		// 点击课程
		handleClick(row, key, week) {
			this.isSHOWtITLEinfo = true;
			week.hover = false;
			row[key.id+'_'+row.id+'_info'] = true;
			if(row[key.id].length == 0){
				return
			}
			let isSlecteChage = false,isSlecteChageId='';
			this.columesList.forEach((_s,s)=>{
				this.tableData.forEach((_d,d)=>{
					_d[_s.id].forEach((_f,f)=>{
						if(_f.status == 1){
							isSlecteChageId = _f.id;
							isSlecteChage = true;
							
						}
					})
				})
			})
			if(isSlecteChage && week.id != isSlecteChageId){
				this.$confirm('是否确认调整课程?', '提示', {
					confirmButtonText: '确定',
					cancelButtonText: '取消',
					type: 'warning'
				}).then(() => {
					let obj = {
						classId: this.currentMsg.id,
						codeXYVM: {
							festivalId: row.id,
							weekId: key.id
						},
						courseSheetId: this.oldPKcORSERiDS,
						courseSheetVMS: this.stepData[this.step]
					}
					this.changePKweekList(obj);
				}).catch(() => {
				     
				});
				return
			}else{
				console.log(row[key.id+'_'+row.id+'_conflictData'])
				let ignoreList = [];
				row[key.id+'_'+row.id+'_conflictData'].forEach((_b,b)=>{
					ignoreList.push({
						res: '冲突',
						type: 'ct',
						value: '0',
						name: _b.courseName || _b.teacherName
					})
				})
				this.ignoreList = ignoreList.concat(this.oldignoreList);
				this.oldPKcORSERiDS = week.courseSheetId;
				// let objarr = [];
				// row[key.id].forEach((_s,s)=>{
				// 	_s.data.forEach((_d,d)=>{
				// 		objarr.push(_d.id)
				// 	})
				// })
				let isselect = false;
				row[key.id].forEach((_a,a)=>{
					if(_a.id == week.id){
						if(_a.status == 1){
							_a.status = 0;
							this.isSHOWtITLEinfo = false;
							row[key.id+'_'+row.id+'_info'] = false;
							isselect = false;
							this.ignoreList = this.oldignoreList;
							this.columesList.forEach((_s,s)=>{
								this.moveTeacherList.forEach((_f,f)=>{
									_f[_s.id] = [];
								})
							})
						}else{
							_a.status = 1;
							isselect = true;
						}
					}
				})
				this.columesList.forEach((_s,s)=>{
					this.tableData.forEach((_d,d)=>{
						let conflictData = this.$_.filter(this.oldSatates, o=>{
							return o.classId == this.currentMsg.id && o.weekId == _s.id && o.festivalId == _d.id
						})
						_d[`${_s.id}_${_d.id}_status`] = conflictData.length>0 ? 3 : 0;
						
					})
				})
				if(!isselect){
					return
				}
				
				this.getCanTKW({
					solutionId: this.id,
					classId: this.currentMsg.id,
					courseSheetIds: [this.oldPKcORSERiDS],
					courseSheetVMS: this.stepData[this.step]
				}).then(res=>{
					this.tableData.forEach((_a,a)=>{
						this.columesList.forEach((_s,s)=>{
							_a[_s.id].forEach((_d,d)=>{
								if(_d.id != week.id){
									_d.status = 0;
								}
							})
						})
					})
					let data = week.teachers.length>0 ? week.teachers[0] : [];
					this.teacherName1 = week.status == 1 ? (data ? data.teacherName : '') : '';
					if(this.optimizeTypoeId == '1'){ // 班级
						this.columesList.forEach((_s,s)=>{
							this.tableData.forEach((_d,d)=>{
								_d[`${_s.id}_${_d.id}_status`] = this.$_.find(res, o=>{return o.festivalId == _d.id && o.weekId == _s.id}) ? 2 : _d[`${_s.id}_${_d.id}_status`];
							})
							this.moveTeacherList.forEach((_d,d)=>{
								let arr = this.$_.filter(this.stepData[this.step], o=>{
									return o.teacherId == data.teacherId && o.weekId == _s.id && o.festivalId == _d.id
								})
								let uniqCourse = this.$_.uniqBy(arr, 'courseId');
								let _course = [];
								uniqCourse.forEach((_d,d)=>{
									_course.push({
										id: _d.courseId,
										name: _d.courseName, // 简称
										className: _d.className,
										gradeName: _d.gradeName,
										singleDoubleType: _d.singleDoubleType,
										teachers: this.$_.filter(arr, o=>{return o.teacherId == _d.teacherId})
									})
								})
								_d[_s.id] = week.status == 1 ? _course : [];
							})
						})
					}
				})
			}
		},
		// 调课
		changePKweekList(arr){
			changePKweek(arr).then(data=>{
				this.ignoreList = this.oldignoreList;
				this.ignoreList = []; // 情况冲突详情
				this.$notify({
					message: '调课成功',
					type: 'success'
				});
				this.isSHOWtITLEinfo = false;
				this.columesList.forEach((_s,s)=>{
					this.dragTeacherList.forEach((_d,d)=>{
						_d[_s.id] = [];
					})
					this.moveTeacherList.forEach((_f,f)=>{
						_f[_s.id] = [];
					})
				})
				this.step++;
				this.stepData[this.step] = this.$_.cloneDeep(data);
				this.pageLoading = true;
				let obj = {
					solutionId: this.id,
					courseSheetVMS: data
				}
				// 检测冲突
				this.checkeCTList(obj).then(res=>{
					this.oldSatates = this.$_.cloneDeep(res);
					this.pageLoading = false;
					this.columesList.forEach((_s,s)=>{
						this.tableData.forEach((_d,d)=>{
							let arr = this.$_.filter(this.stepData[this.step], o=>{
								return o.classId == this.currentMsg.id && o.weekId == _s.id && o.festivalId == _d.id
							})
							let conflictData = this.$_.filter(res, o=>{
								return o.classId == this.currentMsg.id && o.weekId == _s.id && o.festivalId == _d.id
							})
							let uniqCourse = this.$_.uniqBy(arr, 'courseId');
							let _course = [];
							uniqCourse.forEach((_f,d)=>{
								_course.push({
									courseSheetId: _f.id,
									id: _f.courseId,
									name: _f.courseName, // 简称
									courseShortName: _f.courseShortName, // 全称
									roomAddr: _f.roomAddr, // 场地
									status: 0,
									hover: false,
									data: arr,
									singleDoubleType: _f.singleDoubleType,
									teachers: this.$_.filter(arr, o=>{return o.courseId == _f.courseId  && o.teacherId})
								})
							})
							_d[`${_s.id}_${_d.id}_status`] = conflictData.length>0 ? 3 : 0;
							_d[`${_s.id}_${_d.id}_conflictData`] = conflictData;
							_d[_s.id] = _course;
							
						})
					})
					console.log(this.tableData);
				}).catch(err=>{
					this.pageLoading = false;
				})
			}).catch(err=>{

			})
		},
		// 鼠标进入
		mounseOver(row, key, week, t) {
			week.hover = week.status == 0 ? true : false;
			this.showDargTeacherList = week.status == 0 ? true : false;
			this.mounseMakeData(row, key, week, t)
		},
		// 鼠标移出
		mounseLeave(row, key, week, t) {
			week.hover = false;
			this.showDargTeacherList = true;
			this.mounseMakeData(row, key, week, t)
		},
		// 鼠标移入移出
		mounseMakeData(row, key, week, t){
			if(row[key.id].length == 0){
				return
			}
			let data = week.teachers.length>0 ? week.teachers[0] : null;
			this.teacherName2 = t == 'in' ? (data ? data.teacherName : '') : '';
			if(this.optimizeTypoeId == '1'){ // 班级
				this.columesList.forEach((_s,s)=>{
					this.dragTeacherList.forEach((_d,d)=>{
						let arr = this.$_.filter(this.stepData[this.step], o=>{
							return o.teacherId == data.teacherId && o.weekId == _s.id && o.festivalId == _d.id
						})
						let uniqCourse = this.$_.uniqBy(arr, 'courseId');
						let _course = [];
						uniqCourse.forEach((_d,d)=>{
							_course.push({
								id: _d.courseId,
								name: _d.courseName,
								className: _d.className,
								gradeName: _d.gradeName,
								singleDoubleType: _d.singleDoubleType,
								teachers: this.$_.filter(arr, o=>{return o.teacherId == _d.teacherId})
							})
						})
						_d[_s.id] = t == 'in' ? _course : [];
					})
				})
			}
		},
		handleIconClick() {},
		handleFullScren(){
			if (!screenfull.enabled) {
				this.$message({
					message: 'you browser can not work',
					type: 'warning'
				})
				return false
			}
			this.isfullscreen = !this.isfullscreen;
			screenfull.toggle()
		},
		// 保存课位
		handleSavePK(){
			this.pageLoading = true;
			saveCoursesheetvm({
				solutionId: this.id,
				courseSheetVMS: this.stepData[this.step]
			}).then(res=>{
				this.step = '0';
				this.stepData = {};
				this.$notify({
					title: '成功',
					message: '保存成功',
					type: 'success'
				});
				// 重新查询课表
				selectCoursesheetvm(this.id).then(res=>{
					this.stepData[this.step] = this.$_.cloneDeep(res);
					this.getCTList().then(res=>{
						this.oldSatates = this.$_.cloneDeep(res);
						this.pageLoading = false;
						this.columesList.forEach((_s,s)=>{
							this.tableData.forEach((_d,d)=>{
								let arr = this.$_.filter(this.stepData[this.step], o=>{
									return o.classId == this.currentMsg.id && o.weekId == _s.id && o.festivalId == _d.id
								})
								let conflictData = this.$_.filter(res, o=>{
									return o.classId == this.currentMsg.id && o.weekId == _s.id && o.festivalId == _d.id
								})
								let uniqCourse = this.$_.uniqBy(arr, 'courseId');
								let _course = [];
								uniqCourse.forEach((_f,d)=>{
									_course.push({
										courseSheetId: _f.id,
										id: _f.courseId,
										name: _f.courseName, // 简称
										courseShortName: _f.courseShortName, // 全称
										roomAddr: _f.roomAddr, // 场地
										status: 0,
										hover: false,
										data: arr,
										singleDoubleType: _f.singleDoubleType,
										teachers: this.$_.filter(arr, o=>{return o.courseId == _f.courseId  && o.teacherId})
									})
								})
								_d[`${_s.id}_${_d.id}_status`] = conflictData.length>0 ? 3 : 0;
								_d[`${_s.id}_${_d.id}_conflictData`] = conflictData;
								_d[_s.id] = _course;
								
							})
						})
					}).catch(err=>{
						this.pageLoading = false;
					})
				}).catch(err=>{
					this.pageLoading = false;
				})
			}).catch(err=>{
				this.pageLoading = false;
			})
		},
		renderContent(h, { node, data, store }) {
			// console.log(node);
			return (
				<span>
					<span>
						<i
						style={{
							display: node.childNodes.length == 0 ? "none" : "",
							fontSize: "16px",
							position: "relative",
							top: "2px"
						}}
						class={{
							fa: true,
							"fa-folder-o": !node.expanded,
							"fa-folder-open-o": node.expanded
						}}
						aria-hidden="true"
						/>
						<i style={{
							display: node.childNodes.length != 0 ? "none" : "",
							fontSize: "16px",
							position: "relative",
							top: "2px"
						}}
						class="fa fa-file-text-o"
						aria-hidden="true"
						/>
						<span> {node.label}</span>
					</span>
				</span>
			);
		}
  	}
};
</script>
<style>
.sy-pk-o {
    width: 100%;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}
.sy-pk_border {
  border: 1px solid #ccc;
}
.sy-pk_bg_fff {
  background-color: #fff;
}
.sy-pk_noborder {
  line-height: 42px;
}
.sy-pk-step-optimeize_absolute{
	width: 99%;
	margin: 0 auto;
	padding-bottom: 10px;
	border: 1px solid #ccc;
}
.sy-pk-optimeize_absolute {
  width: 100%;
  box-sizing: border-box;
  padding-bottom: 20px;
}
.sy-pk-optimeize_fixed{
	position: fixed;
	top: 0;
	width: 100%;
  	box-sizing: border-box;
	bottom: 0px;
	background-color: #fafcfb;
	z-index: 1000;
}
.sy-pk-optimeize_head {
  text-align: center;
  height: 38px;
  line-height: 38px;
  box-sizing: border-box;
  overflow-y: auto;
}
.sy-pk-optimeize_body {
  box-sizing: border-box;
}
.sy-pk-optimeize div {
  box-sizing: border-box;
}
.sy-pk-optimeize-col {
  position: relative;
  height: 100%;
  padding: 0 5px;
  box-sizing: border-box;
}
.sy-pk-optimeize-col h3 {
  margin: 0;
  height: 40px;
  line-height: 40px;
}
.sy-pk-optimeize-col .sy-pk-optimeize-tree-box {
  border: 1px solid #ccc;
  margin-top: 10px;
}
.sy-pk-optimeize-tree_head {
  margin: 0;
  line-height: 40px;
  padding: 0 10px;
}
.sy-pk-optimeize-tree_body {
  width: 100%;
  overflow-y: auto;
  height: 450px;
}
tr.clazz_row > td {
  cursor: pointer;
}
tr.clazz_row > td div.pk-selected {
  background-color: #efefef !important;
}
ul.no_teacher_ul {
  overflow: hidden;
  width: 100%;
  box-sizing: border-box;
  border-top: 1px solid #ccc;
  border-left: 1px solid #ccc;
}
ul.no_teacher_ul > li {
  float: left;
  width: 33.3%;
  box-sizing: border-box;
  line-height: 39px;
  border-right: 1px solid #ccc;
  border-bottom: 1px solid #ccc;
  text-align: center;
  background-color: #98ff65;
}
</style>
